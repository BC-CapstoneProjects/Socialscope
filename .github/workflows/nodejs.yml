# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  CI: false
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./root/frontend/package-lock.json
    - run: |
        npm install
      working-directory: ./root/frontend
    - run: |
        npm run build --if-present
      working-directory: ./root/frontend
    - run: |
        mkdir ./backend/src/main/resources/static
        mkdir ./backend/src/main/resources/static/private
        mkdir ./backend/secret
        mv ./frontend/build ./frontend/static
        mv ./frontend/static ./backend/src/main/resources/static
        ls
      working-directory: ./root
    - run: |
        git clone https://${{ secrets.MY_GITHUB_TOKEN }}@github.com/thienhuynh98/${{ secrets.SECRET_REPO }}.git
      working-directory: ./root/backend/secret
    - run: |
        mv ./backend/secret/private ./backend/secret/apple
      working-directory: ./root
    - run: |
        cat credentials.json
      working-directory: ./root/backend/secret/apple
    - run: |
        ls
      working-directory: ./root/backend/secret/apple
    - run: echo "redditUserAgent=${{ secrets.REDDITUSERAGENT }}" >> $GITHUB_ENV
    - run: echo "redditAppId=${{ secrets.REDDITAPPID }}" >> $GITHUB_ENV
    - run: echo "twitterAppId=${{ secrets.TWITTERAPPID }}" >> $GITHUB_ENV
    - run: echo "twitterAppSecret=${{ secrets.TWITTERAPPSECRET }}" >> $GITHUB_ENV
    - run: echo "redditAppSecret=${{ secrets.REDDITAPPSECRET }}" >> $GITHUB_ENV
    - run: echo "twitterUserAgent=${{ secrets.TWITTERUSERAGENT }}" >> $GITHUB_ENV
    - run: echo "youtubeApiKey=${{ secrets.YOUTUBEAPIKEY }}" >> $GITHUB_ENV
    - run: echo "youtubeUserAgent=${{ secrets.YOUTUBEUSERAGENT }}" >> $GITHUB_ENV
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'
        cache: 'maven'
    - run: |
        ls
      working-directory: ./root/backend/secret/apple
    - run: mvn clean package
      working-directory: ./root/backend
    - run: |
        ls
      working-directory: ./root/backend/target
    - name: Upload JAR
      uses: actions/upload-artifact@v2
      with:
        name: artifact
        path: ./root/backend/target/backend-0.0.1-SNAPSHOT.jar
    - uses: actions/checkout@v2
    - name: Download JAR
      uses: actions/download-artifact@v2
      with:
        name: artifact
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::356271724309:role/thienhuynhCICD
        aws-region: us-east-1
        role-session-name: MySessionName
#    - name: Configure AWS Credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: "us-east-1"
#
#    - name: Upload package to S3 bucket
#      run: aws s3 cp backend-0.0.1-SNAPSHOT.jar s3://thienhuynh-bucket/
#
#    - name: Create new ElasticBeanstalk Application Version
#      run: |
#        aws elasticbeanstalk create-application-version \
#        --application-name MyAwesomeApp \
#        --source-bundle S3Bucket="thienhuynh-bucket",S3Key="backend-0.0.1-SNAPSHOT.jar" \
#        --version-label "ver-${{ github.sha }}" \
#        --description "commit-sha-${{ github.sha }}"
#
#    - name: Deploy new ElasticBeanstalk Application Version
#      run: aws elasticbeanstalk update-environment --environment-name Myawesomeapp-env-1 --version-label "ver-${{ github.sha }}"

